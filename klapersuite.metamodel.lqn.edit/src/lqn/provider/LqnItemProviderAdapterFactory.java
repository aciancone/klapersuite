/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package lqn.provider;

import java.util.ArrayList;
import java.util.Collection;

import lqn.util.LqnAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LqnItemProviderAdapterFactory extends LqnAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LqnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.LqnModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LqnModelItemProvider lqnModelItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.LqnModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLqnModelAdapter() {
		if (lqnModelItemProvider == null) {
			lqnModelItemProvider = new LqnModelItemProvider(this);
		}

		return lqnModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.Processor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessorItemProvider processorItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.Processor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessorAdapter() {
		if (processorItemProvider == null) {
			processorItemProvider = new ProcessorItemProvider(this);
		}

		return processorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryItemProvider entryItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryAdapter() {
		if (entryItemProvider == null) {
			entryItemProvider = new EntryItemProvider(this);
		}

		return entryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.TaskActivityGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskActivityGraphItemProvider taskActivityGraphItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.TaskActivityGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskActivityGraphAdapter() {
		if (taskActivityGraphItemProvider == null) {
			taskActivityGraphItemProvider = new TaskActivityGraphItemProvider(this);
		}

		return taskActivityGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.EntryActivityGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryActivityGraphItemProvider entryActivityGraphItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.EntryActivityGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryActivityGraphAdapter() {
		if (entryActivityGraphItemProvider == null) {
			entryActivityGraphItemProvider = new EntryActivityGraphItemProvider(this);
		}

		return entryActivityGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.PhaseActivities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhaseActivitiesItemProvider phaseActivitiesItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.PhaseActivities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhaseActivitiesAdapter() {
		if (phaseActivitiesItemProvider == null) {
			phaseActivitiesItemProvider = new PhaseActivitiesItemProvider(this);
		}

		return phaseActivitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.EntryMakingCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryMakingCallItemProvider entryMakingCallItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.EntryMakingCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryMakingCallAdapter() {
		if (entryMakingCallItemProvider == null) {
			entryMakingCallItemProvider = new EntryMakingCallItemProvider(this);
		}

		return entryMakingCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.MakingCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakingCallItemProvider makingCallItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.MakingCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakingCallAdapter() {
		if (makingCallItemProvider == null) {
			makingCallItemProvider = new MakingCallItemProvider(this);
		}

		return makingCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityMakingCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityMakingCallItemProvider activityMakingCallItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityMakingCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityMakingCallAdapter() {
		if (activityMakingCallItemProvider == null) {
			activityMakingCallItemProvider = new ActivityMakingCallItemProvider(this);
		}

		return activityMakingCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityPhase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityPhaseItemProvider activityPhaseItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityPhase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityPhaseAdapter() {
		if (activityPhaseItemProvider == null) {
			activityPhaseItemProvider = new ActivityPhaseItemProvider(this);
		}

		return activityPhaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityDefBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityDefBaseItemProvider activityDefBaseItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityDefBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityDefBaseAdapter() {
		if (activityDefBaseItemProvider == null) {
			activityDefBaseItemProvider = new ActivityDefBaseItemProvider(this);
		}

		return activityDefBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityDefItemProvider activityDefItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityDefAdapter() {
		if (activityDefItemProvider == null) {
			activityDefItemProvider = new ActivityDefItemProvider(this);
		}

		return activityDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.CallList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallListItemProvider callListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.CallList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallListAdapter() {
		if (callListItemProvider == null) {
			callListItemProvider = new CallListItemProvider(this);
		}

		return callListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.EntryActivityDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryActivityDefItemProvider entryActivityDefItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.EntryActivityDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryActivityDefAdapter() {
		if (entryActivityDefItemProvider == null) {
			entryActivityDefItemProvider = new EntryActivityDefItemProvider(this);
		}

		return entryActivityDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.SynchCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchCallItemProvider synchCallItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.SynchCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchCallAdapter() {
		if (synchCallItemProvider == null) {
			synchCallItemProvider = new SynchCallItemProvider(this);
		}

		return synchCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.AsynchCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsynchCallItemProvider asynchCallItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.AsynchCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsynchCallAdapter() {
		if (asynchCallItemProvider == null) {
			asynchCallItemProvider = new AsynchCallItemProvider(this);
		}

		return asynchCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityGraphItemProvider activityGraphItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityGraphAdapter() {
		if (activityGraphItemProvider == null) {
			activityGraphItemProvider = new ActivityGraphItemProvider(this);
		}

		return activityGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.Precedence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrecedenceItemProvider precedenceItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.Precedence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrecedenceAdapter() {
		if (precedenceItemProvider == null) {
			precedenceItemProvider = new PrecedenceItemProvider(this);
		}

		return precedenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ReplyActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplyActivityItemProvider replyActivityItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ReplyActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplyActivityAdapter() {
		if (replyActivityItemProvider == null) {
			replyActivityItemProvider = new ReplyActivityItemProvider(this);
		}

		return replyActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ReplyEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplyEntryItemProvider replyEntryItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ReplyEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplyEntryAdapter() {
		if (replyEntryItemProvider == null) {
			replyEntryItemProvider = new ReplyEntryItemProvider(this);
		}

		return replyEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.SingleActivityList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleActivityListItemProvider singleActivityListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.SingleActivityList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleActivityListAdapter() {
		if (singleActivityListItemProvider == null) {
			singleActivityListItemProvider = new SingleActivityListItemProvider(this);
		}

		return singleActivityListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityLoopList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityLoopListItemProvider activityLoopListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityLoopList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityLoopListAdapter() {
		if (activityLoopListItemProvider == null) {
			activityLoopListItemProvider = new ActivityLoopListItemProvider(this);
		}

		return activityLoopListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.AndJoinList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndJoinListItemProvider andJoinListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.AndJoinList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndJoinListAdapter() {
		if (andJoinListItemProvider == null) {
			andJoinListItemProvider = new AndJoinListItemProvider(this);
		}

		return andJoinListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityListItemProvider activityListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityListAdapter() {
		if (activityListItemProvider == null) {
			activityListItemProvider = new ActivityListItemProvider(this);
		}

		return activityListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.OrList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrListItemProvider orListItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.OrList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrListAdapter() {
		if (orListItemProvider == null) {
			orListItemProvider = new OrListItemProvider(this);
		}

		return orListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityOrItemProvider activityOrItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityOrAdapter() {
		if (activityOrItemProvider == null) {
			activityOrItemProvider = new ActivityOrItemProvider(this);
		}

		return activityOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link lqn.ActivityLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityLoopItemProvider activityLoopItemProvider;

	/**
	 * This creates an adapter for a {@link lqn.ActivityLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityLoopAdapter() {
		if (activityLoopItemProvider == null) {
			activityLoopItemProvider = new ActivityLoopItemProvider(this);
		}

		return activityLoopItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (lqnModelItemProvider != null) lqnModelItemProvider.dispose();
		if (processorItemProvider != null) processorItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (entryItemProvider != null) entryItemProvider.dispose();
		if (taskActivityGraphItemProvider != null) taskActivityGraphItemProvider.dispose();
		if (entryActivityGraphItemProvider != null) entryActivityGraphItemProvider.dispose();
		if (phaseActivitiesItemProvider != null) phaseActivitiesItemProvider.dispose();
		if (entryMakingCallItemProvider != null) entryMakingCallItemProvider.dispose();
		if (makingCallItemProvider != null) makingCallItemProvider.dispose();
		if (activityMakingCallItemProvider != null) activityMakingCallItemProvider.dispose();
		if (activityPhaseItemProvider != null) activityPhaseItemProvider.dispose();
		if (activityDefBaseItemProvider != null) activityDefBaseItemProvider.dispose();
		if (activityDefItemProvider != null) activityDefItemProvider.dispose();
		if (callListItemProvider != null) callListItemProvider.dispose();
		if (entryActivityDefItemProvider != null) entryActivityDefItemProvider.dispose();
		if (synchCallItemProvider != null) synchCallItemProvider.dispose();
		if (asynchCallItemProvider != null) asynchCallItemProvider.dispose();
		if (activityGraphItemProvider != null) activityGraphItemProvider.dispose();
		if (precedenceItemProvider != null) precedenceItemProvider.dispose();
		if (replyActivityItemProvider != null) replyActivityItemProvider.dispose();
		if (replyEntryItemProvider != null) replyEntryItemProvider.dispose();
		if (singleActivityListItemProvider != null) singleActivityListItemProvider.dispose();
		if (activityLoopListItemProvider != null) activityLoopListItemProvider.dispose();
		if (andJoinListItemProvider != null) andJoinListItemProvider.dispose();
		if (activityListItemProvider != null) activityListItemProvider.dispose();
		if (orListItemProvider != null) orListItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (activityOrItemProvider != null) activityOrItemProvider.dispose();
		if (activityLoopItemProvider != null) activityLoopItemProvider.dispose();
	}

}
